#! /usr/bin/env python3

from sys import stdout

####################################################################################################
#
# http://en.wikipedia.org/wiki/ANSI_escape_code
#
# Control Sequence Introducer (CSI) = ESC+[ = \x1B] = \x9B
#
# SGR - Select Graphic Rendition
#   CSI n [;k] m
#   Sets SGR parameters, including text color. After CSI can be zero
#   or more parameters separated with ';'. With no parameters, CSI m is
#   treated as CSI 0 m (reset / normal), which is typical of most of
#   the ANSI escape sequences.
#
# SGR (Select Graphic Rendition)
# parameters Code | Effect | Note
# 0       Reset / Normal    | all attributes off
# 1       Bright (increased intensity) or Bold
# 2       Faint (decreased intensity)    | not widely supported
# 3       Italic: on    | not widely supported. Sometimes treated as inverse.
# 4       Underline: Single
# 5       Blink: Slow    | less than 150 per minute
# 6       Blink: Rapid    | MS-DOS ANSI.SYS; 150 per minute or more; not widely supported
# 7       Image: Negative    | inverse or reverse; swap foreground and background
# 8       Conceal    | not widely supported
# 9       Crossed-out    | Characters legible, but marked for deletion. Not widely supported.
# 10      Primary(default) font
# 11-19   n-th alternate font    | Select the n-th alternate font. 14 being the fourth alternate font, up to 19 being the 9th alternate font.
# 20      Fraktur    | hardly ever supported
# 21      Bright/Bold: off or Underline: Double    | bold off not widely supported, double underline hardly ever
# 22      Normal color or intensity    | neither bright, bold nor faint
# 23      Not italic, not Fraktur
# 24      Underline: None    | not singly or doubly underlined
# 25      Blink: off
# 26      Reserved
# 27      Image: Positive
# 28      Reveal    | conceal off
# 29      Not crossed out
# 30-37   Set text color    | 30 + x, where x is from the color table below
# 38      Set xterm-256 text color    | next arguments are 5;x where x is color index (0..255)
# 39      Default text color    | implementation defined (according to standard)
# 40-47   Set background color    | 40 + x, where x is from the color table below
# 48      Set xterm-256 background color    | next arguments are 5;x where x is color index (0..255)
# 49      Default background color    | implementation defined (according to standard)
# 50      Reserved
# 51      Framed
# 52      Encircled
# 53      Overlined
# 54      Not framed or encircled
# 55      Not overlined
# 56-59   Reserved
# 60      ideogram underline or right side line    | hardly ever supported
# 61      ideogram double underline or double line on the right side    | hardly ever supported
# 62      ideogram overline or left side line    | hardly ever supported
# 63      ideogram double overline or double line on the left side    | hardly ever supported
# 64      ideogram stress marking    | hardly ever supported
# 90-99   Set foreground color, high intensity    | aixterm (not in standard)
# 100-109 Set background color, high intensity    | aixterm (not in standard)
#
#####################################################################################################

CSI = '\033['

def format_sgr(*args):
    return CSI + ';'.join([str(x) for x in args]) + 'm'


normal_sgr = format_sgr(0)

####################################################################################################

sep = normal_sgr + '|'

print('Text Colour:')
# 30-37 | Set text color | 30 + x, where x run from 0 to 7
for colour in range(8):
    stdout.write(sep)
    stdout.write(format_sgr(30 + colour) + 'colour')
print(sep)
# 1 | Bright (increased intensity) or Bold
for colour in range(8):
    stdout.write(sep)
    stdout.write(format_sgr(30 + colour, 1) + 'colour')
print(sep)

print('\nBackground Colour:')
# 40-47 | Set background color | 40 + x, where x is run from 0 to 7
for colour in range(8):
    stdout.write(sep)
    stdout.write(format_sgr(40 + colour) + 'colour')
print(sep)

# 48 | Set xterm-256 background color | next arguments are 5;x where x is color index (0..255)

print("\nSystem colours [0,7]:")
for colour in range(8):
    stdout.write(format_sgr(48, 5, colour) + ' ')
print(normal_sgr + '|')

print("\nSystem colours [8,15]:")
for colour in range(8, 16):
    stdout.write(format_sgr(48, 5, colour) + ' ')
print(normal_sgr + '|')

print("\nColor cube 6x6x6 [16,231]:")
for red in range(6):
    for green in range(6):
        for blue in range(6):
            colour = 16 + (red * 36) + (green * 6) + blue
            stdout.write(format_sgr(48, 5, colour) + ' ')
        stdout.write(normal_sgr + '|')
    print()

print("\nGrayscale ramp [232,255]:")
for gray in range(24):
    stdout.write(format_sgr(48, 5, 232 + gray) + ' ')
print(normal_sgr + '|')

# 38 | Set xterm-256 text color | next arguments are 5;x where x is color index (0..255)

print("\nColor cube 6x6x6 [16,231]:")
for red in range(6):
    for green in range(6):
        for blue in range(6):
            colour = 16 + (red * 36) + (green * 6) + blue
            stdout.write(format_sgr(38, 5, colour) + 'X')
        stdout.write(normal_sgr + '|')
    print()

print('\nBackground and Foreground Colour:')
for bg_colour in range(9):
    for bold in 0, 1:
        for fg_colour in range(9):
            stdout.write(sep)
            args = [40 + bg_colour, 30 + fg_colour]
            if bold:
                args += [1]
            sgr = format_sgr(*args)
            stdout.write(sgr + 'colour')
        print(sep)

print('\nBold:')
print(format_sgr(1) + 'text' + normal_sgr)

print('\nUnderline:')
print(format_sgr(4) + 'text' + normal_sgr)
print(format_sgr(4) + 'X' + ' '*80 + 'X' + normal_sgr)

print("\nUnicode Filet:")
print(chr(9472)*80)
print(chr(9473)*80)
print(chr(9552)*80)

print("\nUnicode Filet Plane:")
for i in range(9472, 9728):
    stdout.write(chr(i) + ' ')
print()
