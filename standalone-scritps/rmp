#! /usr/bin/env python3

####################################################################################################
#
# See also https://github.com/alanzchen/rm-protection
#
####################################################################################################

####################################################################################################

from pathlib import Path
import argparse
import sys
import subprocess

####################################################################################################

parser = argparse.ArgumentParser(description='Protection over /usr/bin/rm.')

parser.add_argument(
    '-r', dest='recursive',
    action='store_true', default=False,
    help='recursive delete',
)

# parser.add_argument(
#     '-f', dest='force',
#     action='store_true', default=False,
#     help='force (DEFAULT, UNUSED, FOR COMPATIBILITY)',
# )

parser.add_argument(
    'paths', metavar='PATH',
    nargs='+',
    help='path to delete',
)

args = parser.parse_args()

####################################################################################################

def run_rm(paths: Path | list[Path], recursive: bool = False) -> None:
    if isinstance(paths, (list, tuple)):
        path = [paths]

    for path in paths:
        if str(path) == '/':
            print('Error: Cannot delete /')
            sys.exit(1)

    command = [
        '/usr/bin/rm',
        # '--verbose',
    ]

    if recursive:
        command += [
            '-r',   # remove directories and their contents recursively
            '-f',   # ignore nonexistent files and arguments, never prompt
            # '--dir', # remove empty directories
        ]

    command += [str(path) for path in paths]

    # print(' '.join(command))
    subprocess.run(command, stdout=sys.stdout, stderr=sys.stderr)

####################################################################################################


paths = [Path(path).expanduser().absolute() for path in args.paths]

if args.recursive or len(paths) > 1:
    for path in paths:
        if path.exists():
            rc = input('Remove {} ? '.format(path))
            if rc == 'y':
                run_rm([path], recursive=args.recursive)
        else:
            print(f"Error: Path '{path}' doesn't exist")
else:
    run_rm(paths, recursive=False)   # args.recursive
